/*
 * Joshua Palmer
 * Z: 23280034
 * COP 4331 001
 * HW1 q3 - DataAnalyzerTester.java
 *
 * 1. DataAnalyzer methods called by helper function on lines 79-82.
 *    Main function on line 86.
 *
 * 2. Instead of entering the numbers one-by-one in a loop,
 *    the user enters the sequence as a single string of
 *    integers separated by spaces.
 *
 * 3. Input is validated with regular expressions.
 *
 * 4. Output is generated by a helper function, and that output
 *    is used to print both to the console and to a file.
 *
 * https://github.com/palmerjoshua/COP4331
 */
package hw1.q3;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class DataAnalyzerTester {
    /**
     * Regular expression pattern that matches sequences of integers
     * separated by spaces, or the letter 'q'.
     * @see #isValidInput(String)
     */
    private static final Pattern inputPattern = Pattern.compile("^(\\d+ *)+$");

    /**
     * Tests a string against a regular expression.
     * @param userInput String to be tested.
     * @return True if the String matches, False if it does not match.
     * @see #inputPattern
     */
    private static boolean isValidInput(String userInput) {
        Matcher input_matcher = inputPattern.matcher(userInput);
        return input_matcher.matches();
    }

    /**
     * Converts a string of integers into a LinkedList of integers.
     * @param userString An already-validated string of integers.
     * @throws IllegalArgumentException if userString cannot be parsed into an int.
     * @return A LinkedList of integers.
     */
    private static LinkedList<Integer> stringToList(String userString) {
        LinkedList<Integer> result = new LinkedList<Integer>();
        String[] splitString = userString.split(" ");
        for (String s: splitString) {
            if (s.length() > 0) {
                try {
                    result.add(Integer.parseInt(s));
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Sequence element must be integer.");
                }
            }
        }
        return result;
    }

    /**
     * Helper function to create a string for printing to the console and saving to a file.
     * @param da A DataAnalyzer whose dataList has already been populated.
     * @return A string containing the DataAnalyzer's data.
     */
    private static String[] makeOutputStrings(DataAnalyzer da) {
        if (da.isEmpty()) throw new IllegalArgumentException("DataAnalyzer is empty.");
        String[] result = new String[4];
        result[0] = "Sequence: " + da.getSequence();
        result[1] = "Min: " + da.min();
        result[2] = "Max: " + da.max();
        result[3] = "Average: " + da.average();
        return result;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        LinkedList<Integer> inputList;
        String[] outputStrings;
        DataAnalyzer analyzer;
        PrintWriter pw;

        String userInput = "";
        while (!isValidInput(userInput)) {
            System.out.print("Enter a sequence of numbers separated by spaces: ");
            userInput = in.nextLine().trim();
            if (!isValidInput(userInput)) {
                System.out.println("INVALID INPUT");
            }
        }

        try {
            inputList = stringToList(userInput);
            analyzer = new DataAnalyzer(inputList);
            outputStrings = makeOutputStrings(analyzer);
            pw = new PrintWriter("q3_output.txt");

            for (String s: outputStrings) {
                System.out.println(s);
                pw.println(s);
            }
            pw.close();

        } catch (IllegalArgumentException e2) {
            System.err.println(e2.getMessage());
            System.exit(-1);

        } catch (IOException e) {
            System.err.println("Could not open output file.");
            System.exit(-1);
        }
    }
}
